{"ast":null,"code":"import _slicedToArray from \"/home/jack/Projects/hackathon_reuters/hackathon-t-reuters-fe/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport escapeRegExp from 'escape-string-regexp';\nimport { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\n\nconst useFilter = () => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        query = _useState2[0],\n        setQuery = _useState2[1];\n\n  const employer = useSelector(state => state.employers.map(employ => {\n    return {\n      name: employ.name,\n      description: employ.description\n    };\n  }));\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        employerFiltered = _useState4[0],\n        setEmployerFiltered = _useState4[1];\n\n  useEffect(() => {\n    setEmployerFiltered(employer);\n    return () => {};\n  }, [employer]);\n\n  const handlerFilter = e => {\n    setQuery(e.target.value.trim());\n    /* const match = new RegExp(escapeRegExp(query),'i')\n    const filteredEmployer = (query)?employer.filter((employ) => {\n        match.test(employ.name)\n    }):employer;\n    setEmployerFiltered(filteredEmployer) */\n  };\n\n  return {\n    query,\n    employer,\n    handlerFilter\n  };\n};\n\nexport default useFilter;","map":{"version":3,"sources":["/home/jack/Projects/hackathon_reuters/hackathon-t-reuters-fe/src/components/app/useFilter.js"],"names":["escapeRegExp","useState","useEffect","useSelector","useFilter","query","setQuery","employer","state","employers","map","employ","name","description","employerFiltered","setEmployerFiltered","handlerFilter","e","target","value","trim"],"mappings":";AACA,OAAOA,YAAP,MAAyB,sBAAzB;AACA,SAAQC,QAAR,EAAiBC,SAAjB,QAAiC,OAAjC;AACA,SAAQC,WAAR,QAA0B,aAA1B;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA,oBACMH,QAAQ,CAAC,EAAD,CADd;AAAA;AAAA,QACbI,KADa;AAAA,QACNC,QADM;;AAEpB,QAAMC,QAAQ,GAAGJ,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACC,SAAN,CAAgBC,GAAhB,CAAqBC,MAAD,IAAY;AAClE,WAAO;AACHC,MAAAA,IAAI,EAAED,MAAM,CAACC,IADV;AAEHC,MAAAA,WAAW,EAAEF,MAAM,CAACE;AAFjB,KAAP;AAIH,GALqC,CAAV,CAA5B;;AAFoB,qBAQ4BZ,QAAQ,EARpC;AAAA;AAAA,QAQba,gBARa;AAAA,QAQKC,mBARL;;AASpBb,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,mBAAmB,CAACR,QAAD,CAAnB;AACA,WAAO,MAAM,CAEZ,CAFD;AAGH,GALQ,EAKN,CAACA,QAAD,CALM,CAAT;;AAMA,QAAMS,aAAa,GAAIC,CAAD,IAAO;AACzBX,IAAAA,QAAQ,CAACW,CAAC,CAACC,MAAF,CAASC,KAAT,CAAeC,IAAf,EAAD,CAAR;AACA;;;;;AAKH,GAPD;;AAQA,SAAM;AAACf,IAAAA,KAAD;AAAOE,IAAAA,QAAP;AAAgBS,IAAAA;AAAhB,GAAN;AACH,CAxBD;;AA0BA,eAAeZ,SAAf","sourcesContent":["\nimport escapeRegExp from 'escape-string-regexp'\nimport {useState,useEffect} from 'react'\nimport {useSelector} from 'react-redux'\n\nconst useFilter = () => {\n    const [query, setQuery] = useState('');\n    const employer = useSelector(state => state.employers.map((employ) => {\n        return {\n            name: employ.name,\n            description: employ.description\n        }\n    }))\n    const [employerFiltered, setEmployerFiltered] = useState()\n    useEffect(() => {\n        setEmployerFiltered(employer)\n        return () => {\n            \n        };\n    }, [employer])\n    const handlerFilter = (e) => {\n        setQuery(e.target.value.trim());\n        /* const match = new RegExp(escapeRegExp(query),'i')\n        const filteredEmployer = (query)?employer.filter((employ) => {\n            match.test(employ.name)\n        }):employer;\n        setEmployerFiltered(filteredEmployer) */\n    }\n    return{query,employer,handlerFilter}\n}\n\nexport default useFilter;"]},"metadata":{},"sourceType":"module"}