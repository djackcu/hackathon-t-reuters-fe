{"ast":null,"code":"import _slicedToArray from \"/home/jack/Projects/hackathon_reuters/hackathon-t-reuters-fe/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport escapeRegExp from 'escape-string-regexp';\nimport { loadEmployers } from '../../redux/actions/employerActions';\n\nconst useApp = initalValue => {\n  const dispatch = useDispatch();\n\n  const loadEmployer = () => dispatch(loadEmployers());\n\n  useEffect(() => {\n    loadEmployer();\n    return () => {};\n  }, []);\n\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        query = _useState2[0],\n        setQuery = _useState2[1];\n\n  const employer = useSelector(state => state.employers.map(employ => {\n    return {\n      name: employ.name,\n      description: employ.description\n    };\n  }));\n\n  const _useState3 = useState(employer),\n        _useState4 = _slicedToArray(_useState3, 2),\n        employerFiltered = _useState4[0],\n        setEmployerFiltered = _useState4[1];\n\n  const handlerFilter = e => {\n    const newVal = e.target.value;\n    setQuery(newVal);\n    const match = new RegExp(escapeRegExp(newVal), 'i');\n    console.log(match);\n    let filteredEmployer = employer.filter(employ => match.test(employ.name));\n    setEmployerFiltered(filteredEmployer);\n  };\n\n  return {\n    query,\n    employerFiltered,\n    handlerFilter\n  };\n};\n\nexport default useApp;","map":{"version":3,"sources":["/home/jack/Projects/hackathon_reuters/hackathon-t-reuters-fe/src/components/app/useApp.js"],"names":["useSelector","useDispatch","useEffect","useState","escapeRegExp","loadEmployers","useApp","initalValue","dispatch","loadEmployer","query","setQuery","employer","state","employers","map","employ","name","description","employerFiltered","setEmployerFiltered","handlerFilter","e","newVal","target","value","match","RegExp","console","log","filteredEmployer","filter","test"],"mappings":";AAAA,SAAQA,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAAQC,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AACA,SAAQC,aAAR,QAA4B,qCAA5B;;AAEA,MAAMC,MAAM,GAAIC,WAAD,IAAiB;AAE5B,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;;AACA,QAAMQ,YAAY,GAAG,MAAMD,QAAQ,CAACH,aAAa,EAAd,CAAnC;;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,YAAY;AACZ,WAAO,MAAM,CAEZ,CAFD;AAGH,GALQ,EAKN,EALM,CAAT;;AAL4B,oBAYFN,QAAQ,CAAC,EAAD,CAZN;AAAA;AAAA,QAYrBO,KAZqB;AAAA,QAYdC,QAZc;;AAc5B,QAAMC,QAAQ,GAAGZ,WAAW,CAACa,KAAK,IAAIA,KAAK,CAACC,SAAN,CAAgBC,GAAhB,CAAqBC,MAAD,IAAY;AAClE,WAAO;AACHC,MAAAA,IAAI,EAAED,MAAM,CAACC,IADV;AAEHC,MAAAA,WAAW,EAAEF,MAAM,CAACE;AAFjB,KAAP;AAIH,GALqC,CAAV,CAA5B;;AAd4B,qBAqBoBf,QAAQ,CAACS,QAAD,CArB5B;AAAA;AAAA,QAqBrBO,gBArBqB;AAAA,QAqBHC,mBArBG;;AAsB5B,QAAMC,aAAa,GAAIC,CAAD,IAAO;AACzB,UAAMC,MAAM,GAAGD,CAAC,CAACE,MAAF,CAASC,KAAxB;AACAd,IAAAA,QAAQ,CAACY,MAAD,CAAR;AACA,UAAMG,KAAK,GAAG,IAAIC,MAAJ,CAAWvB,YAAY,CAACmB,MAAD,CAAvB,EAAgC,GAAhC,CAAd;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,QAAII,gBAAgB,GAAGlB,QAAQ,CAACmB,MAAT,CAAiBf,MAAD,IAAYU,KAAK,CAACM,IAAN,CAAWhB,MAAM,CAACC,IAAlB,CAA5B,CAAvB;AACAG,IAAAA,mBAAmB,CAACU,gBAAD,CAAnB;AACH,GAPD;;AAQA,SAAM;AAACpB,IAAAA,KAAD;AAAOS,IAAAA,gBAAP;AAAwBE,IAAAA;AAAxB,GAAN;AACH,CA/BD;;AAiCA,eAAef,MAAf","sourcesContent":["import {useSelector, useDispatch} from 'react-redux'\nimport {useEffect, useState} from 'react'\nimport escapeRegExp from 'escape-string-regexp'\nimport {loadEmployers} from '../../redux/actions/employerActions'\n\nconst useApp = (initalValue) => {\n\n    const dispatch = useDispatch();\n    const loadEmployer = () => dispatch(loadEmployers());\n    \n    useEffect(() => {\n        loadEmployer();\n        return () => {\n            \n        };\n    }, [])\n\n    const [query, setQuery] = useState('');\n    \n    const employer = useSelector(state => state.employers.map((employ) => {\n        return {\n            name: employ.name,\n            description: employ.description\n        }\n    }))\n\n    const [employerFiltered, setEmployerFiltered] = useState(employer);\n    const handlerFilter = (e) => {\n        const newVal = e.target.value;\n        setQuery(newVal);\n        const match = new RegExp(escapeRegExp(newVal),'i')\n        console.log(match)\n        let filteredEmployer = employer.filter((employ) => match.test(employ.name));\n        setEmployerFiltered(filteredEmployer)\n    }\n    return{query,employerFiltered,handlerFilter}\n}\n\nexport default useApp;"]},"metadata":{},"sourceType":"module"}