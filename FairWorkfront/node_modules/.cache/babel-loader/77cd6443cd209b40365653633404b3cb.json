{"ast":null,"code":"import { handleResponse, handleError } from \"./apiUtils\";\nconst baseUrl = process.env.API_URL + \"/employer/\";\nexport function getEmployers() {\n  return fetch(baseUrl + \"all\").then(handleResponse).catch(handleError);\n}\nexport function saveEmployer(employer) {\n  return fetch(baseUrl + (employer.id + \"/\" || \"new-employer/\"), {\n    method: employer.id ? \"PUT\" : \"POST\",\n    // POST for create, PUT to update when id already exists.\n    headers: {\n      \"content-type\": \"application/json\"\n    },\n    body: JSON.stringify(employer)\n  }).then(handleResponse).catch(handleError);\n}\nexport function deleteEmployer(employerId) {\n  return fetch(baseUrl + employerId + \"/\", {\n    method: \"DELETE\"\n  }).then(handleResponse).catch(handleError);\n}","map":{"version":3,"sources":["/home/jack/Projects/hackathon_reuters/hackathon-t-reuters-fe/src/api/employersApi.js"],"names":["handleResponse","handleError","baseUrl","process","env","API_URL","getEmployers","fetch","then","catch","saveEmployer","employer","id","method","headers","body","JSON","stringify","deleteEmployer","employerId"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,WAAzB,QAA4C,YAA5C;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,OAAZ,GAAsB,YAAtC;AAEA,OAAO,SAASC,YAAT,GAAwB;AAC7B,SAAOC,KAAK,CAACL,OAAO,GAAC,KAAT,CAAL,CACJM,IADI,CACCR,cADD,EAEJS,KAFI,CAEER,WAFF,CAAP;AAGD;AAED,OAAO,SAASS,YAAT,CAAsBC,QAAtB,EAAgC;AACrC,SAAOJ,KAAK,CAACL,OAAO,IAAIS,QAAQ,CAACC,EAAT,GAAc,GAAd,IAAqB,eAAzB,CAAR,EAAmD;AAC7DC,IAAAA,MAAM,EAAEF,QAAQ,CAACC,EAAT,GAAc,KAAd,GAAsB,MAD+B;AACvB;AACtCE,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFoD;AAG7DC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,QAAf;AAHuD,GAAnD,CAAL,CAKJH,IALI,CAKCR,cALD,EAMJS,KANI,CAMER,WANF,CAAP;AAOD;AAED,OAAO,SAASiB,cAAT,CAAwBC,UAAxB,EAAoC;AACzC,SAAOZ,KAAK,CAACL,OAAO,GAAGiB,UAAV,GAAuB,GAAxB,EAA6B;AAAEN,IAAAA,MAAM,EAAE;AAAV,GAA7B,CAAL,CACJL,IADI,CACCR,cADD,EAEJS,KAFI,CAEER,WAFF,CAAP;AAGD","sourcesContent":["import { handleResponse, handleError } from \"./apiUtils\";\nconst baseUrl = process.env.API_URL + \"/employer/\";\n\nexport function getEmployers() {\n  return fetch(baseUrl+\"all\")\n    .then(handleResponse)\n    .catch(handleError);\n}\n\nexport function saveEmployer(employer) {\n  return fetch(baseUrl + (employer.id + \"/\" || \"new-employer/\"), {\n    method: employer.id ? \"PUT\" : \"POST\", // POST for create, PUT to update when id already exists.\n    headers: { \"content-type\": \"application/json\" },\n    body: JSON.stringify(employer)\n  })\n    .then(handleResponse)\n    .catch(handleError);\n}\n\nexport function deleteEmployer(employerId) {\n  return fetch(baseUrl + employerId + \"/\", { method: \"DELETE\" })\n    .then(handleResponse)\n    .catch(handleError);\n}\n"]},"metadata":{},"sourceType":"module"}