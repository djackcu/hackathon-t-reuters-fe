{"ast":null,"code":"import * as types from './actionTypes';\nimport * as employerApi from '../../api/employersApi';\nimport { beginApiCall } from './apiStatusActions';\nexport function loadEmployerSuccess(employer) {\n  return {\n    type: types.LOAD_EMPLOYER_SUCCESS,\n    employer\n  };\n}\nexport function createEmployerSuccess(employer) {\n  return {\n    type: types.ADD_EMPLOYER_SUCCESS,\n    employer\n  };\n}\nexport function updateEmployerSuccess(employer) {\n  return {\n    type: types.UPDATE_EMPLOYER_SUCCESS,\n    employer\n  };\n}\nexport function loadEmployers() {\n  return function (dispatch) {\n    dispatch(beginApiCall());\n    return employerApi.getEmployers().then(employer => {\n      dispatch(loadEmployerSuccess(employer));\n    }).catch(error => {\n      throw error;\n    });\n  };\n}\nexport function saveEmployer(employer) {\n  //eslint-disable-next-line no-unused-vars\n  return function (dispatch, getState) {\n    dispatch(beginApiCall());\n    return employerApi.saveEmployer(employer).then(employer => {\n      employer.id ? dispatch(updateEmployerSuccess(savedEmployer)) : dispatch(createEmployerSuccess(savedEmployer));\n    }).catch(error => {\n      throw error;\n    });\n  };\n}","map":{"version":3,"sources":["/home/jack/Projects/hackathon_reuters/hackathon-t-reuters-fe/src/redux/actions/employerActions.js"],"names":["types","employerApi","beginApiCall","loadEmployerSuccess","employer","type","LOAD_EMPLOYER_SUCCESS","createEmployerSuccess","ADD_EMPLOYER_SUCCESS","updateEmployerSuccess","UPDATE_EMPLOYER_SUCCESS","loadEmployers","dispatch","getEmployers","then","catch","error","saveEmployer","getState","id","savedEmployer"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,eAAvB;AACA,OAAO,KAAKC,WAAZ,MAA6B,wBAA7B;AACA,SAASC,YAAT,QAA6B,oBAA7B;AAEA,OAAO,SAASC,mBAAT,CAA8BC,QAA9B,EAAwC;AAC9C,SAAO;AAAEC,IAAAA,IAAI,EAAEL,KAAK,CAACM,qBAAd;AAAqCF,IAAAA;AAArC,GAAP;AACA;AAED,OAAO,SAASG,qBAAT,CAAgCH,QAAhC,EAA0C;AAChD,SAAO;AAAEC,IAAAA,IAAI,EAAEL,KAAK,CAACQ,oBAAd;AAAoCJ,IAAAA;AAApC,GAAP;AACA;AAED,OAAO,SAASK,qBAAT,CAAgCL,QAAhC,EAA0C;AAChD,SAAO;AAAEC,IAAAA,IAAI,EAAEL,KAAK,CAACU,uBAAd;AAAuCN,IAAAA;AAAvC,GAAP;AACA;AAED,OAAO,SAASO,aAAT,GAA0B;AAChC,SAAO,UAAUC,QAAV,EAAoB;AAC1BA,IAAAA,QAAQ,CAACV,YAAY,EAAb,CAAR;AACA,WAAOD,WAAW,CAChBY,YADK,GAELC,IAFK,CAECV,QAAD,IAAc;AACnBQ,MAAAA,QAAQ,CAACT,mBAAmB,CAACC,QAAD,CAApB,CAAR;AACA,KAJK,EAKLW,KALK,CAKEC,KAAD,IAAW;AACjB,YAAMA,KAAN;AACA,KAPK,CAAP;AAQA,GAVD;AAWA;AAED,OAAO,SAASC,YAAT,CAAuBb,QAAvB,EAAiC;AACvC;AACA,SAAO,UAAUQ,QAAV,EAAoBM,QAApB,EAA8B;AACpCN,IAAAA,QAAQ,CAACV,YAAY,EAAb,CAAR;AACA,WAAOD,WAAW,CAACgB,YAAZ,CAAyBb,QAAzB,EACLU,IADK,CACCV,QAAD,IAAc;AAElBA,MAAAA,QAAQ,CAACe,EAAT,GAAcP,QAAQ,CAACH,qBAAqB,CAACW,aAAD,CAAtB,CAAtB,GACAR,QAAQ,CAACL,qBAAqB,CAACa,aAAD,CAAtB,CADR;AAED,KALK,EAMLL,KANK,CAMEC,KAAD,IAAW;AACjB,YAAMA,KAAN;AACA,KARK,CAAP;AASA,GAXD;AAYA","sourcesContent":["import * as types from './actionTypes';\nimport * as employerApi from '../../api/employersApi';\nimport { beginApiCall } from './apiStatusActions';\n\nexport function loadEmployerSuccess (employer) {\n\treturn { type: types.LOAD_EMPLOYER_SUCCESS, employer };\n}\n\nexport function createEmployerSuccess (employer) {\n\treturn { type: types.ADD_EMPLOYER_SUCCESS, employer };\n}\n\nexport function updateEmployerSuccess (employer) {\n\treturn { type: types.UPDATE_EMPLOYER_SUCCESS, employer };\n}\n\nexport function loadEmployers () {\n\treturn function (dispatch) {\n\t\tdispatch(beginApiCall());\n\t\treturn employerApi\n\t\t\t.getEmployers()\n\t\t\t.then((employer) => {\n\t\t\t\tdispatch(loadEmployerSuccess(employer));\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tthrow error;\n\t\t\t});\n\t};\n}\n\nexport function saveEmployer (employer) {\n\t//eslint-disable-next-line no-unused-vars\n\treturn function (dispatch, getState) {\n\t\tdispatch(beginApiCall());\n\t\treturn employerApi.saveEmployer(employer)\n\t\t\t.then((employer) => {\n\n\t\t\t\t\temployer.id ? dispatch(updateEmployerSuccess(savedEmployer)) :\n\t\t\t\t\tdispatch(createEmployerSuccess(savedEmployer));\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tthrow error;\n\t\t\t});\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}