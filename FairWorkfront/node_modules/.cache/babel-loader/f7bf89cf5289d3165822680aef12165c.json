{"ast":null,"code":"import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { loadEmployerSuccess } from '../../redux/actions/employerActions';\nimport * as employerApi from '../../api/employersApi';\n\nconst useApp = initalValue => {\n  const employers = useSelector(state => state.employers);\n  const dispatch = useDispatch(); //const loadEmployer = () => dispatch(loadEmployers());\n\n  useEffect(() => {\n    employerApi.getEmployers().then(employer => {\n      dispatch(loadEmployerSuccess(employer));\n    }).catch(error => {\n      throw error;\n    });\n    return () => {};\n  }, []);\n  return {\n    employers\n  };\n};\n\nexport default useApp;","map":{"version":3,"sources":["/home/jack/Projects/hackathon_reuters/hackathon-t-reuters-fe/src/components/app/useApp.js"],"names":["useSelector","useDispatch","useEffect","loadEmployerSuccess","employerApi","useApp","initalValue","employers","state","dispatch","getEmployers","then","employer","catch","error"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAAQC,SAAR,QAAwB,OAAxB;AACA,SAAQC,mBAAR,QAAkC,qCAAlC;AACA,OAAO,KAAKC,WAAZ,MAA6B,wBAA7B;;AAEA,MAAMC,MAAM,GAAIC,WAAD,IAAiB;AAC5B,QAAMC,SAAS,GAAGP,WAAW,CAACQ,KAAK,IAAGA,KAAK,CAACD,SAAf,CAA7B;AACA,QAAME,QAAQ,GAAGR,WAAW,EAA5B,CAF4B,CAG5B;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZE,IAAAA,WAAW,CACVM,YADD,GAECC,IAFD,CAEOC,QAAD,IAAc;AAChBH,MAAAA,QAAQ,CAACN,mBAAmB,CAACS,QAAD,CAApB,CAAR;AACH,KAJD,EAKCC,KALD,CAKQC,KAAD,IAAW;AACd,YAAMA,KAAN;AACH,KAPD;AAQA,WAAO,MAAM,CAEZ,CAFD;AAGH,GAZQ,EAYN,EAZM,CAAT;AAcA,SAAM;AAACP,IAAAA;AAAD,GAAN;AACH,CApBD;;AAsBA,eAAeF,MAAf","sourcesContent":["import {useSelector, useDispatch} from 'react-redux'\nimport {useEffect} from 'react'\nimport {loadEmployerSuccess} from '../../redux/actions/employerActions'\nimport * as employerApi from '../../api/employersApi';\n\nconst useApp = (initalValue) => {\n    const employers = useSelector(state =>state.employers);\n    const dispatch = useDispatch();\n    //const loadEmployer = () => dispatch(loadEmployers());\n    \n    useEffect(() => {\n        employerApi\n        .getEmployers()\n        .then((employer) => {\n            dispatch(loadEmployerSuccess(employer));\n        })\n        .catch((error) => {\n            throw error;\n        });\n        return () => {\n            \n        };\n    }, [])\n\n    return{employers};\n}\n\nexport default useApp;"]},"metadata":{},"sourceType":"module"}