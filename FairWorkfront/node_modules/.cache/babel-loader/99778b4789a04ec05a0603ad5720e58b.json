{"ast":null,"code":"import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { loadEmployerSuccess } from '../../redux/actions/employerActions';\n\nconst useApp = initalValue => {\n  const employers = useSelector(state => state.employers);\n  const dispatch = useDispatch();\n\n  const loadEmployers = dispatch => {\n    return function (dispatch) {\n      dispatch(beginApiCall());\n      return employerApi.getEmployers().then(employer => {\n        dispatch(loadEmployerSuccess(employer));\n      }).catch(error => {\n        throw error;\n      });\n    };\n  };\n\n  useEffect(() => {\n    loadEmployers();\n    return () => {};\n  }, []);\n  return {\n    employers\n  };\n};\n\nexport default useApp;","map":{"version":3,"sources":["/home/jack/Projects/hackathon_reuters/hackathon-t-reuters-fe/src/components/app/useApp.js"],"names":["useSelector","useDispatch","useEffect","loadEmployerSuccess","useApp","initalValue","employers","state","dispatch","loadEmployers","beginApiCall","employerApi","getEmployers","then","employer","catch","error"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAAQC,SAAR,QAAwB,OAAxB;AACA,SAAQC,mBAAR,QAAkC,qCAAlC;;AAEA,MAAMC,MAAM,GAAIC,WAAD,IAAiB;AAC5B,QAAMC,SAAS,GAAGN,WAAW,CAACO,KAAK,IAAGA,KAAK,CAACD,SAAf,CAA7B;AACA,QAAME,QAAQ,GAAGP,WAAW,EAA5B;;AACA,QAAMQ,aAAa,GAAID,QAAD,IAAc;AAChC,WAAO,UAAUA,QAAV,EAAoB;AACvBA,MAAAA,QAAQ,CAACE,YAAY,EAAb,CAAR;AACA,aAAOC,WAAW,CACbC,YADE,GAEFC,IAFE,CAEIC,QAAD,IAAc;AAChBN,QAAAA,QAAQ,CAACL,mBAAmB,CAACW,QAAD,CAApB,CAAR;AACH,OAJE,EAKFC,KALE,CAKKC,KAAD,IAAW;AACd,cAAMA,KAAN;AACH,OAPE,CAAP;AAQH,KAVD;AAWH,GAZD;;AAaAd,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,aAAa;AACb,WAAO,MAAM,CAEZ,CAFD;AAGH,GALQ,EAKN,EALM,CAAT;AAOA,SAAM;AAACH,IAAAA;AAAD,GAAN;AACH,CAxBD;;AA0BA,eAAeF,MAAf","sourcesContent":["import {useSelector, useDispatch} from 'react-redux'\nimport {useEffect} from 'react'\nimport {loadEmployerSuccess} from '../../redux/actions/employerActions'\n\nconst useApp = (initalValue) => {\n    const employers = useSelector(state =>state.employers);\n    const dispatch = useDispatch();\n    const loadEmployers = (dispatch) => {\n        return function (dispatch) {\n            dispatch(beginApiCall());\n            return employerApi\n                .getEmployers()\n                .then((employer) => {\n                    dispatch(loadEmployerSuccess(employer));\n                })\n                .catch((error) => {\n                    throw error;\n                });\n        };\n    }\n    useEffect(() => {\n        loadEmployers();\n        return () => {\n            \n        };\n    }, [])\n\n    return{employers};\n}\n\nexport default useApp;"]},"metadata":{},"sourceType":"module"}