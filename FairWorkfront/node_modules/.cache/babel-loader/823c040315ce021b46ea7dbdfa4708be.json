{"ast":null,"code":"import _slicedToArray from \"/home/jack/Projects/hackathon_reuters/hackathon-t-reuters-fe/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport escapeRegExp from 'escape-string-regexp';\n\nconst useFilter = () => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        query = _useState2[0],\n        setQuery = _useState2[1];\n\n  const employer = useSelector(state => state.employers.map(employ => {\n    return {\n      name: employ.name,\n      description: employ.description\n    };\n  }));\n\n  const _useState3 = useState(employer),\n        _useState4 = _slicedToArray(_useState3, 2),\n        employerFiltered = _useState4[0],\n        setEmployerFiltered = _useState4[1];\n\n  const handlerFilter = e => {\n    setQuery(e.target.value.trim());\n    const match = new RegExp(escapeRegExp(query), 'i');\n    const filteredEmployer = query ? employer.filter(employ => {\n      match.test(employ.name);\n    }) : employer;\n    setEmployerFiltered(filteredEmployer);\n  };\n\n  return {\n    query,\n    employerFiltered,\n    handlerFilter\n  };\n};","map":{"version":3,"sources":["/home/jack/Projects/hackathon_reuters/hackathon-t-reuters-fe/src/components/app/useFilter.js"],"names":["escapeRegExp","useFilter","useState","query","setQuery","employer","useSelector","state","employers","map","employ","name","description","employerFiltered","setEmployerFiltered","handlerFilter","e","target","value","trim","match","RegExp","filteredEmployer","filter","test"],"mappings":";AACA,OAAOA,YAAP,MAAyB,sBAAzB;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA,oBACMC,QAAQ,CAAC,EAAD,CADd;AAAA;AAAA,QACbC,KADa;AAAA,QACNC,QADM;;AAEpB,QAAMC,QAAQ,GAAGC,WAAW,CAACC,KAAK,IAAIA,KAAK,CAACC,SAAN,CAAgBC,GAAhB,CAAqBC,MAAD,IAAY;AAClE,WAAO;AACHC,MAAAA,IAAI,EAAED,MAAM,CAACC,IADV;AAEHC,MAAAA,WAAW,EAAEF,MAAM,CAACE;AAFjB,KAAP;AAIH,GALqC,CAAV,CAA5B;;AAFoB,qBAQ4BV,QAAQ,CAACG,QAAD,CARpC;AAAA;AAAA,QAQbQ,gBARa;AAAA,QAQKC,mBARL;;AASpB,QAAMC,aAAa,GAAIC,CAAD,IAAO;AACzBZ,IAAAA,QAAQ,CAACY,CAAC,CAACC,MAAF,CAASC,KAAT,CAAeC,IAAf,EAAD,CAAR;AACA,UAAMC,KAAK,GAAG,IAAIC,MAAJ,CAAWrB,YAAY,CAACG,KAAD,CAAvB,EAA+B,GAA/B,CAAd;AACA,UAAMmB,gBAAgB,GAAInB,KAAD,GAAQE,QAAQ,CAACkB,MAAT,CAAiBb,MAAD,IAAY;AACzDU,MAAAA,KAAK,CAACI,IAAN,CAAWd,MAAM,CAACC,IAAlB;AACH,KAFgC,CAAR,GAEtBN,QAFH;AAGAS,IAAAA,mBAAmB,CAACQ,gBAAD,CAAnB;AACH,GAPD;;AAQA,SAAM;AAACnB,IAAAA,KAAD;AAAOU,IAAAA,gBAAP;AAAwBE,IAAAA;AAAxB,GAAN;AACH,CAlBD","sourcesContent":["\nimport escapeRegExp from 'escape-string-regexp'\n\nconst useFilter = () => {\n    const [query, setQuery] = useState('');\n    const employer = useSelector(state => state.employers.map((employ) => {\n        return {\n            name: employ.name,\n            description: employ.description\n        }\n    }))\n    const [employerFiltered, setEmployerFiltered] = useState(employer)\n    const handlerFilter = (e) => {\n        setQuery(e.target.value.trim());\n        const match = new RegExp(escapeRegExp(query),'i')\n        const filteredEmployer = (query)?employer.filter((employ) => {\n            match.test(employ.name)\n        }):employer;\n        setEmployerFiltered(filteredEmployer)\n    }\n    return{query,employerFiltered,handlerFilter}\n}"]},"metadata":{},"sourceType":"module"}